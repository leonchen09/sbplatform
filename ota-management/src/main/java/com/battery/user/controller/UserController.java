package com.battery.user.controller;

import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.battery.common.Constant;
import com.battery.common.controller.BaseController;
import com.battery.common.utils.StringUtils;
import com.battery.common.vo.AjaxResponse;
import com.battery.common.vo.ShowPage;
import com.battery.core.models.Roles;
import com.battery.core.models.User;
import com.battery.core.models.UserRole;
import com.battery.core.service.RolesService;
import com.battery.core.service.UserRoleService;
import com.battery.core.service.UserService;
import com.battery.core.util.UserKit;
import com.battery.core.vo.search.SearchUserPagingVo;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * This class was generated by Bill Generator. This class corresponds to the
 * database table users
 *
 * @zdmgenerated 2017-47-19 10:47
 */
@Controller
@RequestMapping(value = "/user")
public class UserController extends BaseController {
	@Autowired
	UserService userSer;
	@Autowired
	RolesService rolesSer;
	@Autowired
	UserRoleService userRoleSer;

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取列表", notes = "返回列表")
	public AjaxResponse<List<User>> getUserList(@RequestBody User queryUser) {
		List<User> userList = userSer.selectListSelective(queryUser);
		AjaxResponse<List<User>> ajaxResponse = new AjaxResponse<List<User>>(userList);
		return ajaxResponse;
	}

	@RequestMapping(value = "/listPage", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据条件获取列表分页", notes = "返回列表分页")
	public AjaxResponse<ShowPage<User>> getUserListPage(@RequestBody SearchUserPagingVo searchUserPagingVo) {
		if(StringUtils.isNotEmpty(searchUserPagingVo.getCompanyName()))
			searchUserPagingVo.setCompanyName("%" + searchUserPagingVo.getCompanyName() + "%");
		else
			searchUserPagingVo.setCompanyName(null);
		if(StringUtils.isNotEmpty(searchUserPagingVo.getLoginId()))
			searchUserPagingVo.setLoginId("%" + searchUserPagingVo.getLoginId() + "%");
		else
			searchUserPagingVo.setLoginId(null);
		if(StringUtils.isNotEmpty(searchUserPagingVo.getUserPhone()))
			searchUserPagingVo.setUserPhone("%" + searchUserPagingVo.getUserPhone() + "%");
		else
			searchUserPagingVo.setUserPhone(null);
		
		List<User> userList = userSer.selectListSelectivePaging(searchUserPagingVo);
		ShowPage<User> page = new ShowPage<User>(searchUserPagingVo, userList);
		AjaxResponse<ShowPage<User>> ajaxResponse = new AjaxResponse<ShowPage<User>>(page);
		return ajaxResponse;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "新增", notes = "新增")
	@ApiImplicitParams(value = { @ApiImplicitParam(required = false, name = "userId", paramType = "query") })
	public AjaxResponse<User> save(@RequestBody User user,HttpServletRequest request) {
		setLoginUserInfo(user,request);
		user.setUserId(null);
		AjaxResponse<User> ajaxResponse =  validateBean(user);
		try {
			if(Constant.RS_CODE_SUCCESS == ajaxResponse.getCode()) {
				userSer.insertSelective(user);
				List<User> latestUserList = userSer.selectListSelective(user);
				User latestUser = latestUserList.stream().max(Comparator.comparing(User::getUserId)).get();
				if(latestUser.getRoleId() != null) {
					UserRole userRole = new UserRole();
					userRole.setRoleId(latestUser.getRoleId());
					userRole.setUserId(latestUser.getUserId());
					userRoleSer.insertSelective(userRole);
				}
				ajaxResponse.setMsg("添加成功！");
			}
		} catch (Exception e) {
			ajaxResponse.setMsg("用户已存在！");
			e.printStackTrace();
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk更新", notes = "根据pk更新，属性为null的不更新")
	public AjaxResponse<Object> update(@RequestBody User user,HttpServletRequest request) {
		setLoginUserInfo(user,request);
		if (user.getUserId() == null) {
			return new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "请设置pk！");
		}
		AjaxResponse<Object> ajaxResponse = new AjaxResponse<Object>(Constant.RS_CODE_ERROR, "修改出错！");
		request.setAttribute(Constant.ERROR_REQUEST, ajaxResponse);
		try {
			// 按照一个用户只有一个角色做的。因为web页面，设计的是一个用户只有一个角色
			if (user.getRoleId() != null) {
				UserRole queryUserRole = new UserRole();
				queryUserRole.setUserId(user.getUserId());
				List<UserRole> userRoleList = userRoleSer.selectListSelective(queryUserRole);
				if (userRoleList != null && userRoleList.size() > 0) {
					UserRole userRole = userRoleList.get(0);
					userRole.setRoleId(user.getRoleId());
					userRoleSer.updateByPrimaryKeySelective(userRole);
				} else {
					UserRole userRole = new UserRole();
					userRole.setRoleId(user.getRoleId());
					userRole.setUserId(user.getUserId());
					userRoleSer.insertSelective(userRole);
				}
			}
			//oldUserpassword != null 说明用于修改登录密码，否则是用户账户管理时候做修改
			if(user.getOldUserPassword() != null) {
				User u = userSer.selectByPrimaryKey(user.getUserId());
				if(u.getUserPassword().equals(user.getOldUserPassword())){
					userSer.updateByPrimaryKeySelective(user);
				}else {
					ajaxResponse.setCode(Constant.RS_CODE_ERROR);
					ajaxResponse.setMsg("旧密码输入不正确！");
					return ajaxResponse;
				}
			}else {
				userSer.updateByPrimaryKeySelective(user);
			}
			ajaxResponse.setCode(Constant.RS_CODE_SUCCESS);
			ajaxResponse.setMsg("修改成功！");
		} catch (Exception e) {
			ajaxResponse.setMsg("用户已存在！");
			e.printStackTrace();
		}
		return ajaxResponse;
	}

	@RequestMapping(value = "/entity/{userId}", method = RequestMethod.POST)
	@ResponseBody
	@ApiOperation(value = "根据pk获取", notes = "根据pk获取")
	public AjaxResponse<User> getEntity(@PathVariable Integer userId) {
		AjaxResponse<User> ajaxResponse = new AjaxResponse<User>(Constant.RS_CODE_SUCCESS, "获取成功！");
		if (userId == null) {
			return new AjaxResponse<User>(Constant.RS_CODE_ERROR, "请选择pk！");
		}
		User user = userSer.selectByPrimaryKey(userId);
		if (user != null) {
			// UserDetail userDetail = new UserDetail();
			List<Roles> rolesList = rolesSer.selectListByUserId(userId);
			// BeanUtils.copyProperties(user, userDetail);
			// userDetail.setRolesList(rolesList);
			if (rolesList != null && rolesList.size() > 0) {
				user.setRoleId(rolesList.get(0).getRoleId());
			}else {
				user.setRoleId(null);
			}
			ajaxResponse.setData(user);
		} else {
			ajaxResponse.setCode(Constant.RS_CODE_ERROR);
			ajaxResponse.setMsg("获取失败！");
		}
		return ajaxResponse;
	}
	
	/**
	 * 配置
	 * @param RolesDetail
	 * @param request
	 */
	private void setLoginUserInfo(User user,HttpServletRequest request) {
		User loginUser = UserKit.getLoginUser(request);
		user.setCreateId(loginUser.getUserId());
		user.setCreateName(loginUser.getUserName());
	}
}